{"version":3,"sources":["features/nav/NavBar.tsx","features/Contraceptions/dashbord/ActivityList.tsx","features/Contraceptions/details/AcitvityDetails.tsx","features/Contraceptions/form/ActivityForm.tsx","features/Contraceptions/dashbord/ActivityDashbord.tsx","app/api/agent.ts","app/layout/App.tsx","serviceWorker.ts","index.tsx"],"names":["NavBar","openCreateForm","Menu","fixed","inverted","Container","Item","header","src","alt","style","marginRight","name","Button","onClick","positive","content","ActivityList","selectActivity","contraceptions","deleteActivity","Segment","clearing","Group","divided","map","contraception","key","id","Content","Header","as","indexOf","Meta","date","Description","Extra","floated","color","AcitvityDetails","setSelectedActivity","setEditMode","activity","Card","fluid","wifeAge","wifeEducation","husbandEducation","children","wifeReligion","wifeWork","husbandOccupation","livingStandard","mediaExposure","result","extra","width","basic","ActivityForm","initialformstate","createActivity","editActivity","useState","contraceptiveMethod","setActivity","handleInputChange","event","currentTarget","value","Form","onSubmit","length","newActivity","uuid","Input","type","onChange","placeholder","ActivityDashbord","selectedActivity","editMode","Grid","Column","axios","defaults","baseURL","process","url","responseBody","response","data","requests","get","then","body","post","put","delete","list","details","create","update","App","setContraceptions","useEffect","agent","activities","forEach","split","push","marginTop","filter","a","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.7c4f7ab0.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { Menu, Container, Button } from \"semantic-ui-react\";\r\n\r\n\r\ninterface IProps{\r\n  openCreateForm:()=>void;\r\n}\r\n\r\nexport const NavBar:React.FC<IProps>= ({openCreateForm}) => {\r\n  return (\r\n    <Menu fixed=\"top\" inverted>\r\n      <Container>\r\n        <Menu.Item header>\r\n          <img src=\"/assets/logo.png\" alt=\"logo\" style={{marginRight: 10}} />\r\n          Contraception Method\r\n        </Menu.Item>\r\n        <Menu.Item name=\"Contraceptions\" />\r\n        <Menu.Item>\r\n          <Button onClick={openCreateForm} positive content='Test' />\r\n        </Menu.Item>\r\n      </Container>\r\n    </Menu>\r\n  );\r\n};\r\n","import React from \"react\";\r\nimport { Item, Button, Label, Segment } from \"semantic-ui-react\";\r\nimport { IContraception } from \"../../../app/models/contraception\";\r\n\r\ninterface IProps {\r\n  contraceptions: IContraception[];\r\n  selectActivity: (id: string) => void;\r\n  deleteActivity:(id:string)=>void;\r\n}\r\n\r\nexport const ActivityList: React.FC<IProps> = ({\r\n  selectActivity,\r\n  contraceptions,\r\n  deleteActivity\r\n}) => {\r\n  return (\r\n    <Segment clearing>\r\n      <Item.Group divided>\r\n        {contraceptions.map(contraception => (\r\n          <Item key={contraception.id}>\r\n            <Item.Content>\r\n              <Item.Header as=\"a\">\r\n                Contraceptive method Test{\" \"}\r\n                {contraceptions.indexOf(contraception) + 1}{\" \"}\r\n              </Item.Header>\r\n              <Item.Meta>{contraception.date}</Item.Meta>\r\n              <Item.Description>\r\n                <div>Click View to see details.</div>\r\n              </Item.Description>\r\n              <Item.Extra>\r\n                <Button\r\n                  onClick={() => selectActivity(contraception.id)}\r\n                  floated=\"right\"\r\n                  content=\"View\"\r\n                  color=\"pink\"\r\n                />\r\n                <Button\r\n                  onClick={() => deleteActivity(contraception.id)}\r\n                  floated=\"right\"\r\n                  content=\"Delete\"\r\n                  color=\"red\"\r\n                />\r\n              </Item.Extra>\r\n            </Item.Content>\r\n          </Item>\r\n        ))}\r\n      </Item.Group>\r\n    </Segment>\r\n  );\r\n};\r\n","import React from \"react\";\r\nimport { Card, Image, Icon, Button } from \"semantic-ui-react\";\r\nimport { IContraception } from \"../../../app/models/contraception\";\r\n\r\ninterface IProps {\r\n  activity: IContraception;\r\n  setEditMode:(editMode:boolean)=>void;\r\n  setSelectedActivity:(activity:IContraception |null)=>void;\r\n}\r\n\r\nexport const AcitvityDetails: React.FC<IProps> = ({ setSelectedActivity,setEditMode,activity }) => {\r\n  return (\r\n\r\n\r\n    <Card fluid>\r\n      <Card.Content>\r\n        <Card.Header> Test </Card.Header>\r\n        <Card.Meta>\r\n          <span>{activity.date}</span>\r\n        </Card.Meta>\r\n        <Card.Description>\r\n          <div>Wife's age: {activity.wifeAge}</div>\r\n          <div> Wife's education: {activity.wifeEducation}</div>\r\n          <div>Husband's education: {activity.husbandEducation}</div>\r\n          <div>Number of children: {activity.children}</div>\r\n          <div>Wife's reliion: {activity.wifeReligion}</div>\r\n          <div>Wife's work: {activity.wifeWork}</div>\r\n          <div>Husbands occupation: {activity.husbandOccupation}</div>\r\n          <div>Living standard: {activity.livingStandard}</div>\r\n          <div>Media Exposure: {activity.mediaExposure}</div>\r\n          <div> Results:{activity.result}</div>\r\n          <br></br>\r\n          <p>  1-No use\r\n               2-Long-term\r\n               3-Short-Term\r\n                   </p>\r\n\r\n          \r\n          \r\n\r\n\r\n        </Card.Description>\r\n      </Card.Content>\r\n      <Card.Content extra>\r\n        <Button.Group width={2}>\r\n          <Button onClick={()=>setEditMode(true)} basic color=\"blue\" content=\"Edit\" />\r\n          <Button onClick={()=>setSelectedActivity(null)} basic color=\"grey\" content=\"Cancel\" />\r\n        </Button.Group>\r\n      </Card.Content>\r\n    </Card>\r\n  );\r\n};\r\n","import React, { useState, ChangeEvent, FormEvent } from \"react\";\r\nimport { Segment, Form, Button, IconGroup } from \"semantic-ui-react\";\r\nimport { IContraception } from \"../../../app/models/contraception\";\r\nimport {v4 as uuid} from 'uuid'\r\n\r\ninterface IProps {\r\n  setEditMode: (editMode: boolean) => void;\r\n  activity: IContraception;\r\n  createActivity:(activity:IContraception)=>void;\r\n  editActivity:(activity:IContraception)=>void;\r\n}\r\n\r\nexport const ActivityForm: React.FC<IProps> = ({\r\n  activity: initialformstate,\r\n  setEditMode,\r\n  createActivity,\r\n  editActivity\r\n}) => {\r\n  const initializeForm = () => {\r\n    if (initialformstate) {\r\n      return initialformstate;\r\n    } else {\r\n      return {\r\n        id: \"\",\r\n        date: \"\",\r\n        wifeAge: 0,\r\n        wifeEducation: 0,\r\n        husbandEducation: 0,\r\n        children: 0,\r\n        wifeReligion: 0,\r\n        wifeWork: 0,\r\n        husbandOccupation: 0,\r\n        livingStandard: 0,\r\n        mediaExposure: 0,\r\n        contraceptiveMethod: 0,\r\n        result:\"\"\r\n      };\r\n    }\r\n  };\r\n  const [activity, setActivity] = useState<IContraception>(initializeForm);\r\n\r\n  const handleSubmit=()=>{\r\n    if(activity.id.length===0){\r\n      let newActivity={\r\n        ...activity,\r\n        id:uuid()\r\n      }\r\n      createActivity(newActivity)\r\n    }else{\r\n      editActivity(activity)\r\n    }\r\n\r\n  }\r\n\r\n  const handleInputChange = (event: FormEvent<HTMLInputElement | HTMLTextAreaElement>) => {\r\n    const { name, value } = event.currentTarget;\r\n    setActivity({ ...activity, [name]: value });\r\n  };\r\n  return (\r\n    <Segment clearing>\r\n      <Form onSubmit={handleSubmit}>\r\n        <Form.Input\r\n          type=''\r\n          onChange={handleInputChange}\r\n          name=\"wifeAge\"\r\n          placeholder=\"Wifes age\"\r\n          value={activity.wifeAge}\r\n        />\r\n        <Form.Input\r\n          onChange={handleInputChange}\r\n          name=\"wifeEducation\"\r\n          placeholder=\"Wifes education\"\r\n          value={activity.wifeEducation}\r\n        />\r\n        <Form.Input\r\n          onChange={handleInputChange}\r\n          name=\"husbandEducation\"\r\n          placeholder=\"Husbands education\"\r\n          value={activity.husbandEducation}\r\n        />\r\n        <Form.Input\r\n          onChange={handleInputChange}\r\n          name=\"children\"\r\n          placeholder=\"Number of children\"\r\n          value={activity.children}\r\n        />\r\n        <Form.Input\r\n          onChange={handleInputChange}\r\n          name=\"wifeReligion\"\r\n          placeholder=\"Wifes religion\"\r\n          value={activity.wifeReligion}\r\n        />\r\n        <Form.Input\r\n          onChange={handleInputChange}\r\n          name=\"wifeWork\"\r\n          placeholder=\"Wifes work\"\r\n          value={activity.wifeWork}\r\n        />\r\n        <Form.Input\r\n          onChange={handleInputChange}\r\n          name=\"husbandOccupation\"\r\n          placeholder=\"Husbands occupation\"\r\n          value={activity.husbandOccupation}\r\n        />\r\n        <Form.Input\r\n          onChange={handleInputChange}\r\n          name=\"livingStandard\"\r\n          placeholder=\"Living standard\"\r\n          value={activity.livingStandard}\r\n        />\r\n        <Form.Input\r\n          onChange={handleInputChange}\r\n          name=\"mediaExposure\"\r\n          placeholder=\"Media Exposure\"\r\n          value={activity.mediaExposure}\r\n        />\r\n        \r\n        <Form.Input\r\n          onChange={handleInputChange}\r\n          name=\"date\"\r\n          type=\"datetime-local\"\r\n          placeholder=\"Date\"\r\n          value={activity.date}\r\n        />\r\n\r\n        <Button floated=\"right\" positive type=\"submit\" content=\"Submit\" />\r\n        <Button\r\n          onClick={() => setEditMode(false)}\r\n          floated=\"right\"\r\n          type=\"button\"\r\n          content=\"Cancel\"\r\n        />\r\n      </Form>\r\n    </Segment>\r\n  );\r\n};\r\n","import React from \"react\";\r\nimport { Grid, List } from \"semantic-ui-react\";\r\nimport { IContraception } from \"../../../app/models/contraception\";\r\nimport { ActivityList } from \"./ActivityList\";\r\nimport { AcitvityDetails } from \"../details/AcitvityDetails\";\r\nimport { ActivityForm } from \"../form/ActivityForm\";\r\n\r\ninterface IProps {\r\n  contraceptions: IContraception[];\r\n  selectActivity: (id: string) => void;\r\n  selectedActivity: IContraception | null;\r\n  editMode: boolean;\r\n  setEditMode: (editMode: boolean) => void;\r\n  setSelectedActivity: (activity: IContraception | null) => void;\r\n  createActivity:(activity:IContraception)=>void;\r\n  editActivity:(activity:IContraception)=>void;\r\n  deleteActivity:(id:string)=>void;\r\n}\r\n\r\nexport const ActivityDashbord: React.FC<IProps> = ({\r\n  selectedActivity,\r\n  selectActivity,\r\n  contraceptions,\r\n  editMode,\r\n  setEditMode,\r\n  setSelectedActivity,\r\n  createActivity,\r\n  editActivity,\r\n  deleteActivity\r\n}) => {\r\n  return (\r\n    <Grid>\r\n      <Grid.Column width={10}>\r\n        <ActivityList\r\n          contraceptions={contraceptions}\r\n          selectActivity={selectActivity}\r\n          deleteActivity={deleteActivity}\r\n        />\r\n      </Grid.Column>\r\n\r\n      <Grid.Column width={6}>\r\n        {selectedActivity && !editMode && (\r\n          <AcitvityDetails\r\n            activity={selectedActivity}\r\n            setEditMode={setEditMode}\r\n            setSelectedActivity={setSelectedActivity}\r\n          />\r\n        )}\r\n        {editMode && (\r\n          <ActivityForm key={selectedActivity && selectedActivity.id || 0}\r\n           setEditMode={setEditMode} activity={selectedActivity!} createActivity={createActivity} editActivity={editActivity} />\r\n        )}\r\n      </Grid.Column>\r\n    </Grid>\r\n  );\r\n};\r\n","import axios, { AxiosResponse } from 'axios'\r\nimport { IContraception } from '../models/contraception';\r\n\r\n\r\naxios.defaults.baseURL=process.env.REACT_APP_API_URL;\r\naxios.defaults.url=''\r\n\r\nconst responseBody=(response:AxiosResponse)=>response.data;\r\n\r\nconst requests={\r\n    get:(url:string)=>axios.get(url).then(responseBody),\r\n    post:(url:string,body:{})=>axios.post(url,body).then(responseBody),\r\n    put:(url:string,body:{})=>axios.put(url,body).then(responseBody),\r\n    del:(url:string)=>axios.delete(url).then(responseBody)\r\n}\r\n\r\n\r\nconst Contraceptions={\r\n\r\n    list:():Promise<IContraception[]>=>requests.get('/contraception'),\r\n    details:(id:string)=>requests.get(`/contraception/${id}`),\r\n    create:(contraception:IContraception)=>requests.post('/contraception',contraception),\r\n    update:(contraception:IContraception)=>requests.put(`/contraception/${contraception.id}`,contraception),\r\n    delete:(id:string)=>requests.del(`/contraception/${id}`)\r\n}\r\n\r\n\r\nexport default {\r\n\r\n    Contraceptions\r\n}","import React, { useState, useEffect, Fragment } from \"react\";\nimport { IContraception } from \"../models/contraception\";\nimport { NavBar } from \"../../features/nav/NavBar\";\nimport { List, Container } from \"semantic-ui-react\";\nimport { ActivityDashbord } from \"../../features/Contraceptions/dashbord/ActivityDashbord\";\nimport agent from \"../api/agent\";\n\ninterface IState {\n  contraceptions: IContraception[];\n}\n\nconst App = () => {\n  const [contraceptions, setContraceptions] = useState<IContraception[]>([]);\n  const [\n    selectedActivity,\n    setSelectedActivity\n  ] = useState<IContraception | null>(null);\n\n  const [editMode, setEditMode] = useState(false);\n\n  const handleSelectActivity = (id: string) => {\n    setSelectedActivity(contraceptions.filter(a => a.id === id)[0]);\n    setEditMode(false);\n  };\n\n  const handleOpenCreateForm = () => {\n    setSelectedActivity(null);\n    setEditMode(true);\n  };\n\n  const handleCreateActivity = (activity: IContraception) => {\n    agent.Contraceptions.create(activity).then(() => {\n      setContraceptions([...contraceptions, activity]);\n      setSelectedActivity(activity);\n      setEditMode(false);\n    });\n  };\n\n  const handleEditActivity = (activity: IContraception) => {\n    agent.Contraceptions.update(activity).then(() => {\n      setContraceptions([...contraceptions.filter(a => a.id !== activity.id), activity]);\n      setSelectedActivity(activity);\n      setEditMode(false);\n    });\n  };\n  const handleDeleteActivity = (id: string) => {\n    agent.Contraceptions.delete(id).then(() => {\n      setContraceptions([...contraceptions.filter(a => a.id !== id)]);\n    });\n    \n  };\n\n  useEffect(() => {\n    agent.Contraceptions.list().then(response => {\n      let activities: IContraception[] = [];\n      response.forEach(activity => {\n        activity.date = activity.date.split(\".\")[0];\n        activities.push(activity);\n      });\n      setContraceptions(activities);\n    });\n  }, []); //[] da se useffect jednom pokrene samo\n\n  return (\n    <Fragment>\n      <NavBar openCreateForm={handleOpenCreateForm} />\n      <Container style={{ marginTop: \"7em\" }}>\n        <ActivityDashbord\n          contraceptions={contraceptions}\n          selectActivity={handleSelectActivity}\n          selectedActivity={selectedActivity} //! kaze je li null ili Icont\n          editMode={editMode}\n          setEditMode={setEditMode}\n          setSelectedActivity={setSelectedActivity}\n          createActivity={handleCreateActivity}\n          editActivity={handleEditActivity}\n          deleteActivity={handleDeleteActivity}\n        />\n      </Container>\n    </Fragment>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './app/layout/styles.css';\nimport App from './app/layout/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}