{"version":3,"sources":["serviceWorker.ts","features/nav/NavBar.tsx","features/Contraceptions/dashbord/ActivityList.tsx","features/Contraceptions/details/AcitvityDetails.tsx","features/Contraceptions/form/ActivityForm.tsx","features/Contraceptions/dashbord/ActivityDashbord.tsx","app/api/agent.ts","features/Contraceptions/details/Navabout.tsx","features/Contraceptions/details/About.tsx","app/layout/App.tsx","index.tsx","app/layout/Call.tsx"],"names":["Boolean","window","location","hostname","match","NavBar","openCreateForm","Menu","fixed","inverted","Container","Item","header","as","Link","to","src","alt","style","marginRight","name","Button","onClick","color","content","ActivityList","selectActivity","contraceptions","deleteActivity","Segment","clearing","Group","divided","map","contraception","key","id","Content","Header","indexOf","Meta","date","Description","Extra","floated","AcitvityDetails","setSelectedActivity","setEditMode","activity","Card","fluid","wifeAge","wifeEducation","husbandEducation","children","wifeReligion","wifeWork","husbandOccupation","livingStandard","mediaExposure","result","extra","width","basic","ActivityForm","initialformstate","createActivity","editActivity","useState","Date","getDate","toString","getMonth","getFullYear","contraceptiveMethod","setActivity","handleInputChange","event","currentTarget","value","Form","onSubmit","length","newActivity","uuid","Input","type","onChange","placeholder","positive","reload","ActivityDashbord","selectedActivity","editMode","Grid","Column","axios","defaults","baseURL","process","url","responseBody","response","data","requests","get","then","body","post","put","delete","list","details","create","update","Navabout","About","marginTop","fontFamily","fontSize","fontWeight","App","setContraceptions","useEffect","agent","activities","forEach","split","push","exact","path","component","filter","a","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.677811f1.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\r\nimport { Menu, Container, Button } from \"semantic-ui-react\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\n\r\ninterface IProps{\r\n  openCreateForm:()=>void;\r\n}\r\n\r\nexport const NavBar:React.FC<IProps>= ({openCreateForm}) => {\r\n  return (\r\n    <Menu fixed=\"top\" inverted>\r\n      <Container>\r\n        <Menu.Item header as={Link} to='/'>\r\n          <img src=\"/assets/logo.png\" alt=\"logo\" style={{marginRight: 10}} />\r\n          Contraception Method\r\n        </Menu.Item>\r\n        <Menu.Item  header as={Link} to='/about' name=\"About\" />\r\n        <Menu.Item>\r\n          <Button onClick={openCreateForm} color='blue' content='Test' />\r\n        </Menu.Item>\r\n\r\n\r\n        \r\n      </Container>\r\n    </Menu>\r\n  );\r\n};\r\n","import React from \"react\";\r\nimport { Item, Button, Label, Segment } from \"semantic-ui-react\";\r\nimport { IContraception } from \"../../../app/models/contraception\";\r\n\r\ninterface IProps {\r\n  contraceptions: IContraception[];\r\n  selectActivity: (id: string) => void;\r\n  deleteActivity:(id:string)=>void;\r\n}\r\n\r\nexport const ActivityList: React.FC<IProps> = ({\r\n  selectActivity,\r\n  contraceptions,\r\n  deleteActivity\r\n}) => {\r\n  return (\r\n    <Segment clearing>\r\n      <Item.Group divided>\r\n        {contraceptions.map(contraception => (\r\n          <Item key={contraception.id}>\r\n            <Item.Content>\r\n              <Item.Header as=\"a\">\r\n                Contraceptive method Test{\" \"}\r\n                {contraceptions.indexOf(contraception) + 1}{\" \"}\r\n              </Item.Header>\r\n              <Item.Meta>{contraception.date}</Item.Meta>\r\n              <Item.Description>\r\n                <div>Click View to see details.</div>\r\n              </Item.Description>\r\n              <Item.Extra>\r\n                <Button\r\n                  onClick={() => selectActivity(contraception.id)}\r\n                  floated=\"right\"\r\n                  content=\"View\"\r\n                  color=\"pink\"\r\n                />\r\n                <Button\r\n                  onClick={() => deleteActivity(contraception.id)}\r\n                  floated=\"right\"\r\n                  content=\"Delete\"\r\n                  color=\"red\"\r\n                />\r\n              </Item.Extra>\r\n            </Item.Content>\r\n          </Item>\r\n        ))}\r\n      </Item.Group>\r\n    </Segment>\r\n  );\r\n};\r\n","import React from \"react\";\r\nimport { Card, Image, Icon, Button } from \"semantic-ui-react\";\r\nimport { IContraception } from \"../../../app/models/contraception\";\r\n\r\ninterface IProps {\r\n  activity: IContraception;\r\n  setEditMode:(editMode:boolean)=>void;\r\n  setSelectedActivity:(activity:IContraception |null)=>void;\r\n}\r\n\r\nexport const AcitvityDetails: React.FC<IProps> = ({ setSelectedActivity,setEditMode,activity }) => {\r\n  return (\r\n\r\n\r\n    <Card fluid>\r\n      <Card.Content>\r\n        <Card.Header> Test </Card.Header>\r\n        <Card.Meta>\r\n          <span>{activity.date}</span>\r\n        </Card.Meta>\r\n        <Card.Description>\r\n          <div>Wife's age: {activity.wifeAge}</div>\r\n          <div> Wife's education: {activity.wifeEducation}</div>\r\n          <div>Husband's education: {activity.husbandEducation}</div>\r\n          <div>Number of children: {activity.children}</div>\r\n          <div>Wife's reliion: {activity.wifeReligion}</div>\r\n          <div>Is wife working: {activity.wifeWork}</div>\r\n          <div>Husbands occupation: {activity.husbandOccupation}</div>\r\n          <div>Living standard: {activity.livingStandard}</div>\r\n          <div>Media Exposure: {activity.mediaExposure}</div>\r\n          <div> Results:{activity.result}</div>\r\n          <br></br>\r\n          <p>  1-No use\r\n               2-Long-term\r\n               3-Short-Term\r\n                   </p>\r\n\r\n          \r\n          \r\n\r\n\r\n        </Card.Description>\r\n      </Card.Content>\r\n      <Card.Content extra>\r\n        <Button.Group width={2}>\r\n          <Button onClick={()=>setEditMode(true)} basic color=\"blue\" content=\"Edit\" />\r\n          <Button onClick={()=>setSelectedActivity(null)} basic color=\"grey\" content=\"Cancel\" />\r\n        </Button.Group>\r\n      </Card.Content>\r\n    </Card>\r\n  );\r\n};\r\n","import React, { useState, ChangeEvent, FormEvent } from \"react\";\r\nimport { Segment, Form, Button, IconGroup } from \"semantic-ui-react\";\r\nimport { IContraception } from \"../../../app/models/contraception\";\r\nimport {v4 as uuid} from 'uuid'\r\n\r\ninterface IProps {\r\n  setEditMode: (editMode: boolean) => void;\r\n  activity: IContraception;\r\n  createActivity:(activity:IContraception)=>void;\r\n  editActivity:(activity:IContraception)=>void;\r\n}\r\n\r\nexport const ActivityForm: React.FC<IProps> = ({\r\n  activity: initialformstate,\r\n  setEditMode,\r\n  createActivity,\r\n  editActivity\r\n}) => {\r\n  const initializeForm = () => {\r\n    \r\n    if (initialformstate) {\r\n      return initialformstate;\r\n    } else {\r\n      return {\r\n        id: \"\",\r\n        date: new Date().getDate().toString() +'/'+new Date().getMonth().toString()+'/'+new Date().getFullYear().toString(),\r\n        wifeAge: 0,\r\n        wifeEducation: 0,\r\n        husbandEducation: 0,\r\n        children: 0,\r\n        wifeReligion: 0,\r\n        wifeWork: 0,\r\n        husbandOccupation: 0,\r\n        livingStandard: 0,\r\n        mediaExposure: 0,\r\n        contraceptiveMethod: 0,\r\n        result:\"\"\r\n      };\r\n    }\r\n  };\r\n  const [activity, setActivity] = useState<IContraception>(initializeForm);\r\n\r\n  const handleSubmit=()=>{\r\n    if(activity.id.length===0){\r\n      let newActivity={\r\n        ...activity,\r\n        id:uuid()\r\n      }\r\n      createActivity(newActivity)\r\n    }else{\r\n      editActivity(activity)\r\n    }\r\n\r\n  }\r\n\r\n  const handleInputChange = (event: FormEvent<HTMLInputElement | HTMLTextAreaElement>) => {\r\n    const { name, value } = event.currentTarget;\r\n    setActivity({ ...activity, [name]: value });\r\n  };\r\n  return (\r\n    <Segment clearing>\r\n      <Form onSubmit={handleSubmit}>\r\n        <Form.Input\r\n          type=''\r\n          onChange={handleInputChange}\r\n          name=\"wifeAge\"\r\n          placeholder=\"Wifes age\"\r\n          \r\n        />\r\n        <Form.Input\r\n          onChange={handleInputChange}\r\n          name=\"wifeEducation\"\r\n          placeholder=\"Wifes education(0-4, 1=low, 2, 3, 4=high): \"\r\n          \r\n        />\r\n        <Form.Input\r\n          onChange={handleInputChange}\r\n          name=\"husbandEducation\"\r\n          placeholder=\"Husbands education(0-4, 1=low, 2, 3, 4=high): \"\r\n          \r\n        />\r\n        <Form.Input\r\n          onChange={handleInputChange}\r\n          name=\"children\"\r\n          placeholder=\"Number of children\"\r\n          \r\n        />\r\n        <Form.Input\r\n          onChange={handleInputChange}\r\n          name=\"wifeReligion\"\r\n          placeholder=\"Wifes religion(0=Non-religious, 1-Religious): \"\r\n         \r\n        />\r\n        <Form.Input\r\n          onChange={handleInputChange}\r\n          name=\"wifeWork\"\r\n          placeholder=\"Wife now working?(0-yes, 1-no)\"\r\n          \r\n        />\r\n        <Form.Input\r\n          onChange={handleInputChange}\r\n          name=\"husbandOccupation\"\r\n          placeholder=\"Husbands occupation(0-4, 1=low, 2, 3, 4=high)\"\r\n          \r\n        />\r\n        <Form.Input\r\n          onChange={handleInputChange}\r\n          name=\"livingStandard\"\r\n          placeholder=\"Living standard(0-4, 1=low, 2, 3, 4=high)\"\r\n          \r\n        />         \r\n          \r\n        \r\n        <Form.Input\r\n          onChange={handleInputChange}\r\n          name=\"mediaExposure\"\r\n          placeholder=\"Media Exposure(0-good, 1-not good)\"\r\n          \r\n        />\r\n        \r\n        \r\n\r\n        <Button floated=\"right\" positive type=\"submit\" content=\"Submit\" \r\n        onClick={()=>window.location.reload()}\r\n        />\r\n        <Button\r\n          onClick={() => setEditMode(false)}\r\n          floated=\"right\"\r\n          type=\"button\"\r\n          content=\"Cancel\"\r\n        />\r\n      </Form>\r\n    </Segment>\r\n  );\r\n};\r\n","import React from \"react\";\r\nimport { Grid, List } from \"semantic-ui-react\";\r\nimport { IContraception } from \"../../../app/models/contraception\";\r\nimport { ActivityList } from \"./ActivityList\";\r\nimport { AcitvityDetails } from \"../details/AcitvityDetails\";\r\nimport { ActivityForm } from \"../form/ActivityForm\";\r\nimport { About } from \"../details/About\";\r\n\r\ninterface IProps {\r\n  contraceptions: IContraception[];\r\n  selectActivity: (id: string) => void;\r\n  selectedActivity: IContraception | null;\r\n  editMode: boolean;\r\n  setEditMode: (editMode: boolean) => void;\r\n  setSelectedActivity: (activity: IContraception | null) => void;\r\n  createActivity:(activity:IContraception)=>void;\r\n  editActivity:(activity:IContraception)=>void;\r\n  deleteActivity:(id:string)=>void;\r\n}\r\n\r\nexport const ActivityDashbord: React.FC<IProps> = ({\r\n  selectedActivity,\r\n  selectActivity,\r\n  contraceptions,\r\n  editMode,\r\n  setEditMode,\r\n  setSelectedActivity,\r\n  createActivity,\r\n  editActivity,\r\n  deleteActivity\r\n}) => {\r\n  return (\r\n    <Grid>\r\n      \r\n      <Grid.Column width={10}>\r\n        <ActivityList\r\n          contraceptions={contraceptions}\r\n          selectActivity={selectActivity}\r\n          deleteActivity={deleteActivity}\r\n        />\r\n      </Grid.Column>\r\n\r\n      <Grid.Column width={6}>\r\n        {selectedActivity && !editMode && (\r\n          <AcitvityDetails\r\n            activity={selectedActivity}\r\n            setEditMode={setEditMode}\r\n            setSelectedActivity={setSelectedActivity}\r\n          />\r\n        )}\r\n        {editMode && (\r\n          <ActivityForm key={selectedActivity && selectedActivity.id || 0}\r\n           setEditMode={setEditMode} activity={selectedActivity!} createActivity={createActivity} editActivity={editActivity} />\r\n        )}\r\n        \r\n      </Grid.Column>\r\n\r\n\r\n    </Grid>\r\n  );\r\n};\r\n","import axios, { AxiosResponse } from 'axios'\r\nimport { IContraception } from '../models/contraception';\r\n\r\n\r\naxios.defaults.baseURL=process.env.REACT_APP_API_URL;\r\naxios.defaults.url=''\r\n\r\nconst responseBody=(response:AxiosResponse)=>response.data;\r\n\r\nconst requests={\r\n    get:(url:string)=>axios.get(url).then(responseBody),\r\n    post:(url:string,body:{})=>axios.post(url,body).then(responseBody),\r\n    put:(url:string,body:{})=>axios.put(url,body).then(responseBody),\r\n    del:(url:string)=>axios.delete(url).then(responseBody)\r\n}\r\n\r\n\r\nconst Contraceptions={\r\n\r\n    list:():Promise<IContraception[]>=>requests.get('/contraception'),\r\n    details:(id:string)=>requests.get(`/contraception/${id}`),\r\n    create:(contraception:IContraception)=>requests.post('/contraception',contraception),\r\n    update:(contraception:IContraception)=>requests.put(`/contraception/${contraception.id}`,contraception),\r\n    delete:(id:string)=>requests.del(`/contraception/${id}`)\r\n}\r\n\r\n\r\nexport default {\r\n\r\n    Contraceptions\r\n}","import React from 'react'\r\nimport { Menu, Container } from 'semantic-ui-react'\r\nimport { Link } from 'react-router-dom'\r\n\r\nexport const Navabout = () => {\r\n    return (\r\n        <Menu fixed=\"top\" inverted>\r\n      <Container>\r\n        <Menu.Item header as={Link} to='/'>\r\n          <img src=\"/assets/logo.png\" alt=\"logo\" style={{marginRight: 10}} />\r\n          Contraception Method\r\n        </Menu.Item>\r\n        <Menu.Item  header as={Link} to='/about' name=\"About\" />\r\n        \r\n        \r\n      </Container>\r\n    </Menu>\r\n    )\r\n}\r\n","import React, { Fragment, useEffect, useState } from \"react\";\r\nimport { Container, Menu } from \"semantic-ui-react\";\r\nimport { Route, BrowserRouter, Link } from \"react-router-dom\";\r\nimport { NavBar } from \"../../nav/NavBar\";\r\nimport { IContraception } from \"../../../app/models/contraception\";\r\nimport { Navabout } from \"./Navabout\";\r\ninterface IState {\r\n  contraceptions: IContraception[];\r\n}\r\n\r\nexport const About = () => {\r\n  return (\r\n    <Fragment>\r\n      <Navabout />\r\n\r\n      <Container style={{ marginTop: \"15em\" }}>\r\n        <p style={{ fontFamily: \"Al Nile\", fontSize: 20 }}>\r\n          Dataset:https://archive.ics.uci.edu/ml/datasets/Contraceptive+Method+Choice\r\n          <br></br> <br></br>\r\n          This dataset is a subset of the 1987 National Indonesia Contraceptive\r\n          Prevalence Survey. The samples are married women who were either not\r\n          pregnant or do not know if they were at the time of interview. The\r\n          problem is to predict the current contraceptive method choice (no use,\r\n          long-term methods, or short-term methods) of a woman based on her\r\n          demographic and socio-economic characteristics.\r\n        </p>\r\n\r\n        <p style={{ marginTop: \"10em\",fontFamily: \"Al Nile\", fontSize: 20,fontWeight:\"bold\" }}>\r\n          Made by: Marko Grubeša, Predrag Duvnjak, 2020\r\n        </p>\r\n      </Container>\r\n    </Fragment>\r\n  );\r\n};\r\n","import React, { useState, useEffect, Fragment } from \"react\";\nimport { IContraception } from \"../models/contraception\";\nimport { NavBar } from \"../../features/nav/NavBar\";\nimport { List, Container } from \"semantic-ui-react\";\nimport { ActivityDashbord } from \"../../features/Contraceptions/dashbord/ActivityDashbord\";\nimport agent from \"../api/agent\";\nimport { Route } from \"react-router-dom\";\nimport { About } from \"../../features/Contraceptions/details/About\";\n\ninterface IState {\n  contraceptions: IContraception[];\n}\n\nconst App = () => {\n  const [contraceptions, setContraceptions] = useState<IContraception[]>([]);\n  const [\n    selectedActivity,\n    setSelectedActivity\n  ] = useState<IContraception | null>(null);\n\n  const [editMode, setEditMode] = useState(false);\n\n  const handleSelectActivity = (id: string) => {\n    setSelectedActivity(contraceptions.filter(a => a.id === id)[0]);\n    setEditMode(false);\n  };\n\n  const handleOpenCreateForm = () => {\n    setSelectedActivity(null);\n    setEditMode(true);\n  };\n\n  const handleCreateActivity = (activity: IContraception) => {\n    agent.Contraceptions.create(activity).then(() => {\n      setContraceptions([...contraceptions, activity]);\n      setSelectedActivity(activity);\n      setEditMode(false);\n    });\n  };\n\n  const handleEditActivity = (activity: IContraception) => {\n    agent.Contraceptions.update(activity).then(() => {\n      setContraceptions([...contraceptions.filter(a => a.id !== activity.id), activity]);\n      setSelectedActivity(activity);\n      setEditMode(false);\n    });\n  };\n  const handleDeleteActivity = (id: string) => {\n    agent.Contraceptions.delete(id).then(() => {\n      setContraceptions([...contraceptions.filter(a => a.id !== id)]);\n    });\n    \n  };\n\n  useEffect(() => {\n    agent.Contraceptions.list().then(response => {\n      let activities: IContraception[] = [];\n      response.forEach(activity => {\n        activity.date = activity.date.split(\".\")[0];\n        activities.push(activity);\n      });\n      setContraceptions(activities);\n    });\n  }, []); //[] da se useffect jednom pokrene samo\n\n  return (\n\n    <Route>\n      <Route exact path='/'/>\n      <Route exact path='/about' component={About}\n      \n      \n      />\n\n    <Fragment>\n      <NavBar openCreateForm={handleOpenCreateForm} />\n      <Container style={{ marginTop: \"7em\" }}>\n        <ActivityDashbord\n          contraceptions={contraceptions}\n          selectActivity={handleSelectActivity}\n          selectedActivity={selectedActivity} //! kaze je li null ili Icont\n          editMode={editMode}\n          setEditMode={setEditMode}\n          setSelectedActivity={setSelectedActivity}\n          createActivity={handleCreateActivity}\n          editActivity={handleEditActivity}\n          deleteActivity={handleDeleteActivity}\n        />\n      </Container>\n    </Fragment>\n    </Route>\n    \n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './app/layout/styles.css';\nimport {BrowserRouter} from'react-router-dom'\nimport App from './app/layout/App';\nimport * as serviceWorker from './serviceWorker';\nimport { Call } from './app/layout/Call';\n\nReactDOM.render(<BrowserRouter><Call /></BrowserRouter>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import React, { Fragment } from \"react\";\r\nimport { Route } from \"react-router-dom\";\r\nimport App from \"./App\";\r\nimport { About } from \"../../features/Contraceptions/details/About\";\r\n\r\nexport const Call = () => {\r\n  return (\r\n    <Route>\r\n      \r\n\r\n          <Route path ='/' exact component={App}></Route>\r\n          <Route path ='/about' exact component={About}></Route>\r\n\r\n\r\n      \r\n    </Route>\r\n  );\r\n};\r\n"],"sourceRoot":""}